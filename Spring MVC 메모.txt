Spring MVC의 주요 구성 요소
	DispatcherServlet
		* FrontCOntroller 역할을 수행한다.
		* Servlet 클래스다.
		* 클라이언트의 요청을 접수한다.
		* 요청 처리를 위해 HandlerMapping, HandlerAdapter, ViewResolver, View 객체를 사용한다.
		* web.xml에 <servlet/>, <servlet-mapping/> 태그로 설정한다.
		* Spring MVC 관련 주요 객체를 생성, 조립, 관리하는 스프링 컨테이너를 생성한다.

	HandlerMapping 인터페이스
		* 요청 URL에 대응되는 컨트롤러 혹은 요청 핸들러 메소드 정보를 제공하는 기능이 정의된 인터페이스다.
		* RequestMappingHandlerMapping 객체가 기본 구현객체로 사용된다.
	
	HandlerAdapter 인터페이스
		* 클라이언트의 요청을 처리하는 컨트롤러를 실행하는 기능이 정의된 인터페이스다.
		* RequestMappingHandlerMapping 객체가 기본 구현객체로 사용된다.
		* Spring MVC에서 클라이언트의 요청을 처리하는 컨트롤러를 위해서 다양한 작업을 수행한다.
		  (요청 파라미터 처리, 유효성 체크, 파일 업로드 처리 등)

	ViewResolver 인터페이스
		* 뷰 이름을 분석해서 적절한 뷰 객체를 반환하는 기능이 정의된 인터페이스다.
		* InternalResourceViewResolver 객체가 기본 구현객체로 사용된다.
		* ViewResolver는 컨트롤러 실행 후 반환되는 ModelAndView 객체에 View 객체가 존재하지 않을 때만 실행된다.
		* InternalResourceViewResolver 객체는 JSP 기반의 HTML 응답을 제공하는 웹 애플리케이션에서 기본적으로 사용하는 ViewResolver 객체다.
		* InternalResourceViewResolver 객체는 컨트롤러가 반환하는 뷰 이름에 jsp 페이지의 경로와 이름이 지정되어 있으면
                  해당 JSP로 내부이동시키는 기능이 구현된 InternalResourceViewResolver 객체를 반환하고, 뷰 이름이 redirect:로 시작하면 해당 URL 재요청 응답을 보내는 RedirectView 객체를 반환한다.
		* InternalResourceViewResolver, InternalResourceView, RedirectView는 스프링이 제공하는 객체다.

	View 인터페이스
		* Model에 저장된 데이터를 특정한 타입의 응답컨텐츠로 변환하는 기능이 정의된 인터페이스다.
		* DispatcherServlet은 클라이언트에게 최종적인 응답을 보낼 때 항상 View 구현객체의 기능을 실행시켜서 응답을 보낸다.
		* View 인터페이스는 다양한 구현객체가 존재하고, 사용자 정의 구현객체를 생성할 수 있다.
		* HTML 응답 : InternalResourceView, JstlView
		  재요청URL 응답 : RedirectView
		  액셀 응답 : AbstractExcelView, AbstractJExcelView를 구현한 객체
		  pdf 응답 : AbstractPdfView를 구현한 객체
		  json 응답 : AbstractJackson2View를 구현한 객체


Spring mvc의 파일 업로드
	* pom.xml에 라이브러리 의존성 추가
		commons-fileupload
	* spring bean configuration 파일에 MultipartResolver 빈 등록하기
		<bean id="multipartResolver" class="CommonsMultipartResolver">
		</bean>
		* maxUploadSize, maxUploadSizePerFile, uploadTempDir 등의 프로퍼티를 설정할 수 있다.

	* xxxForm 객체에 MultipartFile 필드 추가하기
		<input type="file" name="upfile"> 이면 입력폼의 값을 저장하는 xxForm객체에 MultipartFile타입의 변수 선언
		(변수명은 입력폼의 name속성의 값과 동일한 이름으로 지정한다.)
		public class xxxForm {
			private MultipartFile upfile;
			// getter/setter 추가
		}

	* 첨부파일을 저장할 폴더 생성
		c:/files/free-board

	* WEB-INF/spring/mvc.properties 파일 생성
		directory.save.freeboard=c:/files/free-board

	* context-mvc.xml에서 mvc.properties 파일 읽기
		<context:property-placeholder location="/WEB-INF/spring/mvc.properties"/>

	* 파일 업로드요청을 처리하는 컨트롤러 구현하기
		// 첨부파일을 저장할 경로를 주입받기
		@Value("${directory.save.freeboard}")
		String saveDirectory;

		// 첨부파일을 지정된 폴더에 저장하기
		MultipartFile upfile = xxxForm.getUpfile();
		if(!upfile.isEmpty()) { // MultipartFile객체에 첨부파일이 존재하는지 확인하기

			// 첨부파일 이름 조회하기
			String filename = upfile.getOriginalFilename();

			// 첨부파일을 저장할 디렉토리와 파일명을 가진 File객체 생성하기
			File file = new FIle(saveDirectory, filename);

			// 서버로 업로드된 첨부파일을 지정된 곳에 복사하기
			FileCopyUtils.copy(upfile.getBytes(), file);				   // 1번 방법
			FileCopyUtils.copy(upfile.getInputStream(), new FileOutputStream(file));   // 2번 방법

			// 첨부파일명을 DB에 저장하기 위해서 VO객체에 담기
			vo.setFilename(filename);
		}
		xxxService.addXXX(vo);




REST(Representational State Transfer)
		- 자원을 이름(자원의 표현, URL)으로 구분하여 해당 자원 상태(정보)를 주고 받는 것
		- HTTP URL을 사용해서 자원의 이름을 명시하고, HTTP Method를 사용해서
		  해당 자원에 대한 작업을 지정하는 것
		
		HTTP Method	자원의 일음		보내는 데이터		받는 데이터
-------------------------------------------------------------------------------------------------------------------------------------------------
데이터 조회	GET		/rest/products/		없음			[{}, {}, {}]		  여러개
데이터 조회	GET		/rest/products/1	없음			{조회된 상품정보}	  한개
데이터 추가	POST		/rest/products/		{"name":"맥북", ...}	{추가된 상품정보}	  한개
데이터 삭제	DELETE		/rest/products/1	없음			
데이터 수정	PUT		/rest/products/1	{"name":"아이폰", ...}	{수정된 상품정보}	  한개

데이터 조회	GET		/rest/book/		없음
데이터 조회	GET		/rest/book/1		없음
데이터 추가	POST		/rest/book/		{"title":"xxx", ...}
데이터 삭제	DELETE		/rest/book/1		없음
데이터 수정	PUT		/rest/book/1		{"title":"xxx", ...}